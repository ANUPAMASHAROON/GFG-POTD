Java solution:


class Solution {
    // Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[]) {
        int n = wt.length;
        
        int cur[] = new int[W+1];
        int prev[] = new int[W+1];
        
        //for capacity 0 or non elements we have nothing to put or no capacity so 0
        
        //traverse
        for(int i=1;i<=n;i++){
            //j is our current capacity
            for(int j=1;j<=W;j++){
                
                //we have to take maximum items till now
                //but we are not able to pick this item
                //we picked the maximum ans which is available above this item
                int not_take=prev[j];
                int take=0;
                
                //check whether if we are able to pick this item
                //bag capacity is equal to or greater to weight
                if(j>=wt[i-1])
                    take=val[i-1] + prev[j-wt[i-1]];
                cur[j]=Math.max(not_take, take);
            }
            prev=cur;
            cur=new int[W+1];
        }
        
        return prev[W];
        
    }
}
